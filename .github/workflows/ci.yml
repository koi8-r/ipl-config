name: ci

on:
  workflow_dispatch:
  release:
    types:
      - created
  push:
    branches:
    - master
    tags:
    - 'v*'
  pull_request:
    branches:
    - master

jobs:
  test:
    environment: ci
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        - ubuntu-latest
        python-version:
        - '3.10'
        - '3.7'
    steps:
    - uses: actions/checkout@v3
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache poetry virtualenv
      uses: actions/cache@v3
      id: cache
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-python-${{ env.pythonLocation }}-${{ hashFiles('poetry.lock') }}
    - name: Install poetry
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        python -m pip install -U pip
        python -m pip install poetry
    - name: Poetry config
      run:
        python -m poetry config virtualenvs.create false
    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run:
        python -m poetry install -E dotenv -E yaml -E toml -E hcl2
    - name: Run tests and coverage
      run: make test
    - name: Upload coverage report
      if: ${{ false }}
      run: |
        curl -Os https://uploader.codecov.io/latest/linux/codecov
        chmod +x codecov
        ./codecov -t ${{ secrets.CODECOV_TOKEN }}
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
        verbose: true
        flags: unit

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    environment: ci
    runs-on: ubuntu-latest
    needs:
    - test

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install -U pip
        python -m pip install poetry
        poetry install --no-dev -v
    - name: Build package
      run: |
        poetry version $(git describe --tags)
        poetry build
    - uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist
    - name: PyPi
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verify_metadata: true
        skip_existing: true
